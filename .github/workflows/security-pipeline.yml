name: Security Pipeline - SAST, SCM, DAST

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

permissions:
  security-events: write
  actions: read
  contents: read

env:
  REGISTRY: docker.io
  IMAGE_NAME: rodrigordavila/test-dast-sast-scm

jobs:
  # SAST - SonarCloud Analysis
  sast:
    name: SAST - SonarCloud
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        if: always()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_PROJECTKEY: ${{ secrets.SONAR_PROJECTKEY }}
          SONAR_ORGANIZATION: ${{ secrets.SONAR_ORGANIZATION }}

  # SCM - Container Security with Trivy
  scm:
    name: SCM - Container Security
    runs-on: ubuntu-latest
    needs: sast
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: docker build -t ${{ env.IMAGE_NAME }}:${{ github.sha }} .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        continue-on-error: true
        timeout-minutes: 10
        with:
          image-ref: ${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'trivy-container'

      - name: Run Trivy filesystem scanner
        uses: aquasecurity/trivy-action@master
        continue-on-error: true
        timeout-minutes: 10
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-fs-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy filesystem scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-fs-results.sarif'
          category: 'trivy-filesystem'

  # Build and Deploy for DAST
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: [sast, scm]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:${{ github.sha }}
            ${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your deployment commands here
          # Example: kubectl apply -f k8s/staging/

  # DAST - ZAP Proxy Security Testing
  dast:
    name: DAST - ZAP Proxy
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Start Flask app
        run: |
          docker run -d -p 5000:5000 ${{ env.IMAGE_NAME }}:${{ github.sha }}
          sleep 10

      - name: Run ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.8.0
        continue-on-error: true
        timeout-minutes: 15
        with:
          target: 'http://localhost:5000'
          cmd_options: '-a'

      - name: Upload ZAP results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: zap-results
          path: .zap/wrk/

  # Security Summary
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [sast, scm, dast]
    if: always()
    steps:
      - name: Generate Security Report
        run: |
          echo "## 🔒 Security Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ SAST (SonarCloud)" >> $GITHUB_STEP_SUMMARY
          echo "- Static Application Security Testing completed" >> $GITHUB_STEP_SUMMARY
          echo "- Code quality and security analysis performed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔍 SCM (Trivy)" >> $GITHUB_STEP_SUMMARY
          echo "- Container Security Management completed" >> $GITHUB_STEP_SUMMARY
          echo "- Vulnerability scanning for Docker images" >> $GITHUB_STEP_SUMMARY
          echo "- Filesystem security analysis performed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🛡️ DAST (ZAP Proxy)" >> $GITHUB_STEP_SUMMARY
          echo "- Dynamic Application Security Testing completed" >> $GITHUB_STEP_SUMMARY
          echo "- Web application security testing performed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Results" >> $GITHUB_STEP_SUMMARY
          echo "- Check the Security tab for detailed vulnerability reports" >> $GITHUB_STEP_SUMMARY
          echo "- Review SonarCloud dashboard for code quality metrics" >> $GITHUB_STEP_SUMMARY
          echo "- ZAP results available as artifacts" >> $GITHUB_STEP_SUMMARY 