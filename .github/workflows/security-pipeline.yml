name: Security Pipeline - SAST, SCM, DAST

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  security-events: write
  actions: read
  contents: read

env:
  REGISTRY: docker.io
  IMAGE_NAME: rodrigordavila/test-dast-sast-scm

jobs:
  # SAST - SonarCloud Analysis
  sast:
    name: SAST - SonarCloud
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Run tests with coverage
        run: |
          python -m pytest test_app.py --cov=app --cov-report=xml:coverage.xml

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_PROJECTKEY: ${{ secrets.SONAR_PROJECTKEY }}
          SONAR_ORGANIZATION: ${{ secrets.SONAR_ORGANIZATION }}

  # SCM - GitHub Code Scanning
  scm:
    name: SCM - CodeQL
    runs-on: ubuntu-latest
    needs: sast
    continue-on-error: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:python"

  # Build and Deploy
  build-and-deploy:
    name: Build & Deploy
    runs-on: ubuntu-latest
    needs: [sast, scm]
    continue-on-error: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        run: |
          docker build -t ${{ env.IMAGE_NAME }}:${{ github.sha }} .
          docker push ${{ env.IMAGE_NAME }}:${{ github.sha }}

  # DAST - ZAP Proxy Security Testing
  dast:
    name: DAST - ZAP
    runs-on: ubuntu-latest
    needs: build-and-deploy
    continue-on-error: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Start Flask app
        run: |
          docker pull ${{ env.IMAGE_NAME }}:${{ github.sha }}
          docker run -d -p 5000:5000 --name flask-app ${{ env.IMAGE_NAME }}:${{ github.sha }}
          sleep 10

      - name: ZAP Scan
        uses: zaproxy/action-baseline@v0.11.0
        with:
          target: 'http://localhost:5000'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

  # Security Summary
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [sast, scm, build-and-deploy, dast]
    if: always()
    steps:
      - name: Security Summary
        run: |
          echo "üîí SECURITY PIPELINE SUMMARY"
          echo "================================"
          echo ""
          
          # Function to get status emoji
          get_status() {
            if [ "$1" == "success" ]; then
              echo "‚úÖ PASSED"
            elif [ "$1" == "failure" ]; then
              echo "‚ùå FAILED"
            else
              echo "‚ö†Ô∏è  SKIPPED"
            fi
          }
          
          # Print status for each stage
          echo "SAST (SonarCloud): $(get_status "${{ needs.sast.result }}")"
          echo "SCM (CodeQL): $(get_status "${{ needs.scm.result }}")"
          echo "Build & Deploy: $(get_status "${{ needs.build-and-deploy.result }}")"
          echo "DAST (ZAP): $(get_status "${{ needs.dast.result }}")"
          echo ""
          
          # Overall status
          echo "üìä OVERALL STATUS"
          echo "=================="
          if [ "${{ needs.sast.result }}" == "success" ] && [ "${{ needs.scm.result }}" == "success" ] && [ "${{ needs.dast.result }}" == "success" ]; then
            echo "üéâ ALL SECURITY CHECKS PASSED"
          else
            echo "‚ö†Ô∏è  SECURITY ISSUES FOUND"
            echo ""
            echo "Issues found:"
            [ "${{ needs.sast.result }}" != "success" ] && echo "- SAST: Code quality/security issues"
            [ "${{ needs.scm.result }}" != "success" ] && echo "- SCM: Code scanning issues"
            [ "${{ needs.dast.result }}" != "success" ] && echo "- DAST: Runtime security issues"
          fi 