name: Security Pipeline - SAST, SCM, DAST

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

permissions:
  security-events: write
  actions: read
  contents: read

env:
  REGISTRY: docker.io
  IMAGE_NAME: rodrigordavila/test-dast-sast-scm

jobs:
  # SAST - SonarCloud Analysis
  sast:
    name: SAST - SonarCloud
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    continue-on-error: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Run tests with coverage
        run: |
          echo "Running unit tests with coverage..."
          python -m pytest test_app.py --cov=app --cov-report=xml:coverage.xml --cov-report=term-missing
          echo "Tests completed successfully"

      - name: Configure SonarCloud properties
        run: |
          if [ "${{ secrets.SAST_VULNS || 'false' }}" = "false" ]; then
            echo "Using secure SonarCloud configuration (vulnerabilities disabled)"
            cp sonar-secure.properties sonar-project.properties
          else
            echo "Using standard SonarCloud configuration (vulnerabilities enabled)"
          fi

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_PROJECTKEY: ${{ secrets.SONAR_PROJECTKEY }}
          SONAR_ORGANIZATION: ${{ secrets.SONAR_ORGANIZATION }}

  # SCM - Container Security with Trivy
  scm:
    name: SCM - Trivy
    runs-on: ubuntu-latest
    needs: sast
    if: github.ref == 'refs/heads/main'
    continue-on-error: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Build and test dependencies
        run: |
          echo "Testing dependencies..."
          python test-build.py
          echo "Dependencies test completed successfully"

      - name: Build Docker image
        run: |
          echo "Building Docker image..."
          docker build -t ${{ env.IMAGE_NAME }}:${{ github.sha }} .
          echo "Docker image built successfully"

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Run Trivy filesystem scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-fs-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: trivy-results.sarif
          category: trivy-container

      - name: Upload Trivy filesystem scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: trivy-fs-results.sarif
          category: trivy-filesystem

  # Build and Deploy
  build-and-deploy:
    name: Build & Deploy
    runs-on: ubuntu-latest
    needs: [sast, scm]
    if: github.ref == 'refs/heads/main'
    continue-on-error: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: |
          echo "Building Docker image..."
          docker build -t ${{ env.IMAGE_NAME }}:${{ github.sha }} .
          echo "Docker image built successfully"

      - name: Push Docker image
        run: |
          echo "Pushing Docker image to registry..."
          docker push ${{ env.IMAGE_NAME }}:${{ github.sha }}
          echo "Docker image pushed successfully"

  # DAST - ZAP Proxy Security Testing
  dast:
    name: DAST - ZAP Proxy
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: github.ref == 'refs/heads/main'
    continue-on-error: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Start Flask app
        run: |
          echo "Pulling Docker image..."
          docker pull ${{ env.IMAGE_NAME }}:${{ github.sha }}
          echo "Starting Flask app container..."
          docker run -d -p 5000:5000 \
            -e SAST_VULNS=${{ secrets.SAST_VULNS || 'false' }} \
            -e SCM_VULNS=${{ secrets.SCM_VULNS || 'false' }} \
            -e DAST_VULNS=${{ secrets.DAST_VULNS || 'false' }} \
            -e XSS_VULN=${{ secrets.XSS_VULN || 'false' }} \
            -e SQL_INJECTION_VULN=${{ secrets.SQL_INJECTION_VULN || 'false' }} \
            -e COMMAND_INJECTION_VULN=${{ secrets.COMMAND_INJECTION_VULN || 'false' }} \
            -e PATH_TRAVERSAL_VULN=${{ secrets.PATH_TRAVERSAL_VULN || 'false' }} \
            -e HARDCODED_SECRETS_VULN=${{ secrets.HARDCODED_SECRETS_VULN || 'false' }} \
            -e INSECURE_DEPENDENCIES=${{ secrets.INSECURE_DEPENDENCIES || 'false' }} \
            --name flask-app \
            ${{ env.IMAGE_NAME }}:${{ github.sha }}
          echo "Container started, waiting for app to be ready..."
          sleep 15

      - name: Verify app is running
        run: |
          echo "Checking if Flask app is running..."
          for i in {1..30}; do
            if curl -f http://localhost:5000/health > /dev/null 2>&1; then
              echo "✅ App is running successfully!"
              curl -s http://localhost:5000/health | jq .
              break
            fi
            echo "Attempt $i: App not ready yet, waiting..."
            sleep 2
          done
        continue-on-error: true

      - name: Install ZAP
        run: |
          echo "Installing ZAP..."
          wget https://github.com/zaproxy/zaproxy/releases/download/v2.14.0/ZAP_2.14.0_Linux.tar.gz
          tar -xzf ZAP_2.14.0_Linux.tar.gz
          sudo mv ZAP_2.14.0 /opt/zap
          sudo chmod +x /opt/zap/zap.sh
          echo "ZAP installed at /opt/zap"
          /opt/zap/zap.sh -version
        continue-on-error: true

      - name: Create ZAP results directory
        run: |
          mkdir -p .zap/wrk
          echo "ZAP results directory created"

      - name: Run ZAP Baseline Scan
        run: |
          echo "Running ZAP scan..."
          if [ -f "/opt/zap/zap.sh" ]; then
            /opt/zap/zap.sh -cmd -quickurl http://localhost:5000 -quickout .zap/wrk/zap-report.html -quickprogress
            echo "ZAP scan completed with CLI version"
          else
            echo "ZAP CLI not found, trying alternative installation..."
            sudo apt-get update
            sudo apt-get install -y zaproxy
            zaproxy -cmd -quickurl http://localhost:5000 -quickout .zap/wrk/zap-report.html -quickprogress
            echo "ZAP scan completed with apt version"
          fi
          echo "ZAP scan finished"
        continue-on-error: true
        timeout-minutes: 15

      - name: Simple ZAP Test
        run: |
          echo "Running simple ZAP test..."
          curl -f http://localhost:5000 || echo "App not accessible"
          echo "DAST test completed (simplified version)"
        continue-on-error: true
        if: failure()

      - name: Generate ZAP Summary
        run: |
          echo "🔍 ZAP DAST Scan Summary" > .zap/wrk/zap-summary.txt
          echo "=========================" >> .zap/wrk/zap-summary.txt
          echo "" >> .zap/wrk/zap-summary.txt
          echo "Target URL: http://localhost:5000" >> .zap/wrk/zap-summary.txt
          echo "Scan Type: Baseline Scan" >> .zap/wrk/zap-summary.txt
          echo "Timestamp: $(date)" >> .zap/wrk/zap-summary.txt
          echo "" >> .zap/wrk/zap-summary.txt
          echo "Vulnerability Status:" >> .zap/wrk/zap-summary.txt
          echo "- SAST_VULNS: ${{ secrets.SAST_VULNS || 'false' }}" >> .zap/wrk/zap-summary.txt
          echo "- SCM_VULNS: ${{ secrets.SCM_VULNS || 'false' }}" >> .zap/wrk/zap-summary.txt
          echo "- DAST_VULNS: ${{ secrets.DAST_VULNS || 'false' }}" >> .zap/wrk/zap-summary.txt
          echo "" >> .zap/wrk/zap-summary.txt
          echo "Files generated:" >> .zap/wrk/zap-summary.txt
          ls -la .zap/wrk/ >> .zap/wrk/zap-summary.txt
          echo "ZAP summary generated"

      - name: Upload ZAP results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: zap-results
          path: .zap/wrk/
          retention-days: 30

  # Security Summary
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [sast, scm, dast]
    if: always()
    steps:
      - name: Security Summary
        if: always()
        run: |
          echo "🔒 SECURITY PIPELINE SUMMARY"
          echo "================================"
          echo ""
          
          # SAST Status
          if [ "${{ job.status }}" == "success" ] && [ "${{ needs.sast.result }}" == "success" ]; then
            echo "✅ SAST (SonarCloud): PASSED"
            echo "   - Static code analysis completed successfully"
            echo "   - Quality Gate: PASSED"
            echo "   - View details: https://sonarcloud.io/dashboard?id=${{ secrets.SONAR_PROJECTKEY }}"
          elif [ "${{ needs.sast.result }}" == "failure" ]; then
            echo "❌ SAST (SonarCloud): FAILED"
            echo "   - Static code analysis failed"
            echo "   - Quality Gate: FAILED"
            echo "   - View details: https://sonarcloud.io/dashboard?id=${{ secrets.SONAR_PROJECTKEY }}"
            echo "   - Pipeline continued despite failure"
          else
            echo "⚠️  SAST (SonarCloud): UNKNOWN"
            echo "   - Status could not be determined"
          fi
          echo ""
          
          # SCM Status
          if [ "${{ needs.scm.result }}" == "success" ]; then
            echo "✅ SCM (Trivy): PASSED"
            echo "   - Container vulnerability scan completed"
            echo "   - Results uploaded to GitHub Security tab"
          elif [ "${{ needs.scm.result }}" == "failure" ]; then
            echo "❌ SCM (Trivy): FAILED"
            echo "   - Container vulnerability scan failed"
            echo "   - Pipeline continued despite failure"
          else
            echo "⚠️  SCM (Trivy): UNKNOWN"
            echo "   - Status could not be determined"
          fi
          echo ""
          
          # Build Status
          if [ "${{ needs.build-and-deploy.result }}" == "success" ]; then
            echo "✅ Build & Deploy: PASSED"
            echo "   - Docker image built and pushed successfully"
            echo "   - Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
          elif [ "${{ needs.build-and-deploy.result }}" == "failure" ]; then
            echo "❌ Build & Deploy: FAILED"
            echo "   - Docker build or push failed"
            echo "   - Pipeline continued despite failure"
          else
            echo "⚠️  Build & Deploy: UNKNOWN"
            echo "   - Status could not be determined"
          fi
          echo ""
          
          # DAST Status
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ DAST (ZAP Proxy): PASSED"
            echo "   - Dynamic application security testing completed"
            echo "   - Results available as workflow artifacts"
          elif [ "${{ job.status }}" == "failure" ]; then
            echo "❌ DAST (ZAP Proxy): FAILED"
            echo "   - Dynamic application security testing failed"
            echo "   - Check workflow logs for details"
          else
            echo "⚠️  DAST (ZAP Proxy): UNKNOWN"
            echo "   - Status could not be determined"
          fi
          echo ""
          
          echo "📊 OVERALL STATUS"
          echo "=================="
          if [ "${{ needs.sast.result }}" == "success" ] && [ "${{ needs.scm.result }}" == "success" ] && [ "${{ needs.build-and-deploy.result }}" == "success" ] && [ "${{ job.status }}" == "success" ]; then
            echo "🎉 ALL TESTS PASSED - Application is secure!"
          else
            echo "⚠️  SOME TESTS FAILED - Review results above"
            echo ""
            echo "🔧 NEXT STEPS:"
            echo "1. Check individual test results above"
            echo "2. Review SonarCloud dashboard for SAST issues"
            echo "3. Check GitHub Security tab for SCM results"
            echo "4. Review workflow artifacts for DAST results"
            echo "5. Fix issues and re-run pipeline"
          fi
          echo ""
          echo "📚 DOCUMENTATION:"
          echo "- SAST: https://docs.sonarcloud.io/"
          echo "- SCM: https://aquasecurity.github.io/trivy/"
          echo "- DAST: https://www.zaproxy.org/docs/" 