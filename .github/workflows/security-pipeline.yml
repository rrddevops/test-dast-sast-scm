name: Security Pipeline - SAST, SCM, DAST

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

permissions:
  security-events: write
  actions: read
  contents: read

env:
  REGISTRY: docker.io
  IMAGE_NAME: rodrigordavila/test-dast-sast-scm

jobs:
  # SAST - SonarCloud Analysis
  sast:
    name: SAST - SonarCloud
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    continue-on-error: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Configure SonarCloud properties
        run: |
          if [ "${{ secrets.SAST_VULNS || 'false' }}" = "false" ]; then
            echo "Using secure SonarCloud configuration (vulnerabilities disabled)"
            cp sonar-secure.properties sonar-project.properties
          else
            echo "Using standard SonarCloud configuration (vulnerabilities enabled)"
          fi

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_PROJECTKEY: ${{ secrets.SONAR_PROJECTKEY }}
          SONAR_ORGANIZATION: ${{ secrets.SONAR_ORGANIZATION }}

  # SCM - Container Security with Trivy
  scm:
    name: SCM - Container Security
    runs-on: ubuntu-latest
    needs: sast
    if: github.ref == 'refs/heads/main'
    continue-on-error: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build and test dependencies
        run: |
          echo "Testing dependencies..."
          python test-build.py
          echo "Dependencies test completed successfully"

      - name: Build Docker image
        run: |
          echo "Building Docker image..."
          docker build -t ${{ env.IMAGE_NAME }}:${{ github.sha }} .
          echo "Docker image built successfully"

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        continue-on-error: true
        timeout-minutes: 10
        with:
          image-ref: ${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'trivy-container'

      - name: Run Trivy filesystem scanner
        uses: aquasecurity/trivy-action@master
        continue-on-error: true
        timeout-minutes: 10
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-fs-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy filesystem scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-fs-results.sarif'
          category: 'trivy-filesystem'

  # Build and Deploy for DAST
  build-and-deploy:
    name: Build & Deploy
    runs-on: ubuntu-latest
    needs: [sast, scm]
    if: github.ref == 'refs/heads/main'
    continue-on-error: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:${{ github.sha }}
            ${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Verify image was pushed
        run: |
          echo "Verifying image was pushed to Docker Hub..."
          docker pull ${{ env.IMAGE_NAME }}:${{ github.sha }}
          echo "Image successfully pulled from Docker Hub!"

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your deployment commands here
          # Example: kubectl apply -f k8s/staging/

  # DAST - ZAP Proxy Security Testing
  dast:
    name: DAST - ZAP Proxy
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: github.ref == 'refs/heads/main'
    continue-on-error: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Start Flask app
        run: |
          docker pull ${{ env.IMAGE_NAME }}:${{ github.sha }}
          docker run -d -p 5000:5000 \
            -e SAST_VULNS=${{ secrets.SAST_VULNS || 'false' }} \
            -e SCM_VULNS=${{ secrets.SCM_VULNS || 'false' }} \
            -e DAST_VULNS=${{ secrets.DAST_VULNS || 'false' }} \
            -e XSS_VULN=${{ secrets.XSS_VULN || 'false' }} \
            -e SQL_INJECTION_VULN=${{ secrets.SQL_INJECTION_VULN || 'false' }} \
            -e COMMAND_INJECTION_VULN=${{ secrets.COMMAND_INJECTION_VULN || 'false' }} \
            -e PATH_TRAVERSAL_VULN=${{ secrets.PATH_TRAVERSAL_VULN || 'false' }} \
            -e HARDCODED_SECRETS_VULN=${{ secrets.HARDCODED_SECRETS_VULN || 'false' }} \
            -e INSECURE_DEPENDENCIES=${{ secrets.INSECURE_DEPENDENCIES || 'false' }} \
            ${{ env.IMAGE_NAME }}:${{ github.sha }}
          sleep 10

      - name: Verify app is running
        run: |
          echo "Checking if Flask app is running..."
          for i in {1..30}; do
            if curl -f http://localhost:5000 > /dev/null 2>&1; then
              echo "App is running successfully!"
              break
            fi
            echo "Attempt $i: App not ready yet, waiting..."
            sleep 2
          done
        continue-on-error: true

      - name: Install ZAP
        run: |
          echo "Installing ZAP..."
          wget https://github.com/zaproxy/zaproxy/releases/download/v2.14.0/ZAP_2.14.0_Linux.tar.gz
          tar -xzf ZAP_2.14.0_Linux.tar.gz
          sudo mv ZAP_2.14.0 /opt/zap
          sudo chmod +x /opt/zap/zap.sh
          echo "ZAP installed at /opt/zap"
          ls -la /opt/zap/
        continue-on-error: true

      - name: Verify ZAP installation
        run: |
          echo "Verifying ZAP installation..."
          if [ -f "/opt/zap/zap.sh" ]; then
            echo "ZAP found at /opt/zap/zap.sh"
            /opt/zap/zap.sh -version
          else
            echo "ZAP not found, trying alternative installation..."
            sudo apt-get update
            sudo apt-get install -y zaproxy
            echo "ZAP installed via apt"
          fi
        continue-on-error: true

      - name: Run ZAP Baseline Scan
        run: |
          echo "Running ZAP scan..."
          if [ -f "/opt/zap/zap.sh" ]; then
            /opt/zap/zap.sh -cmd -quickurl http://localhost:5000 -quickout /tmp/zap-report.html -quickprogress
          elif command -v zaproxy &> /dev/null; then
            zaproxy -cmd -quickurl http://localhost:5000 -quickout /tmp/zap-report.html -quickprogress
          else
            echo "ZAP not available, skipping scan"
          fi
          echo "ZAP scan completed"
        continue-on-error: true
        timeout-minutes: 15

      - name: Simple ZAP Test
        run: |
          echo "Running simple ZAP test..."
          curl -f http://localhost:5000 || echo "App not accessible"
          echo "DAST test completed (simplified version)"
        continue-on-error: true
        if: failure()

      - name: Upload ZAP results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: zap-results
          path: .zap/wrk/

  # Security Summary
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [sast, scm, dast]
    if: always()
    steps:
      - name: Security Summary
        if: always()
        run: |
          echo "üîí SECURITY PIPELINE SUMMARY"
          echo "================================"
          echo ""
          
          # SAST Status
          if [ "${{ job.status }}" == "success" ] && [ "${{ needs.sast.result }}" == "success" ]; then
            echo "‚úÖ SAST (SonarCloud): PASSED"
            echo "   - Static code analysis completed successfully"
            echo "   - Quality Gate: PASSED"
            echo "   - View details: https://sonarcloud.io/dashboard?id=${{ secrets.SONAR_PROJECTKEY }}"
          elif [ "${{ needs.sast.result }}" == "failure" ]; then
            echo "‚ùå SAST (SonarCloud): FAILED"
            echo "   - Static code analysis failed"
            echo "   - Quality Gate: FAILED"
            echo "   - View details: https://sonarcloud.io/dashboard?id=${{ secrets.SONAR_PROJECTKEY }}"
            echo "   - Pipeline continued despite failure"
          else
            echo "‚ö†Ô∏è  SAST (SonarCloud): UNKNOWN"
            echo "   - Status could not be determined"
          fi
          echo ""
          
          # SCM Status
          if [ "${{ needs.scm.result }}" == "success" ]; then
            echo "‚úÖ SCM (Trivy): PASSED"
            echo "   - Container vulnerability scan completed"
            echo "   - Results uploaded to GitHub Security tab"
          elif [ "${{ needs.scm.result }}" == "failure" ]; then
            echo "‚ùå SCM (Trivy): FAILED"
            echo "   - Container vulnerability scan failed"
            echo "   - Pipeline continued despite failure"
          else
            echo "‚ö†Ô∏è  SCM (Trivy): UNKNOWN"
            echo "   - Status could not be determined"
          fi
          echo ""
          
          # Build Status
          if [ "${{ needs.build-and-deploy.result }}" == "success" ]; then
            echo "‚úÖ Build & Deploy: PASSED"
            echo "   - Docker image built and pushed successfully"
            echo "   - Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
          elif [ "${{ needs.build-and-deploy.result }}" == "failure" ]; then
            echo "‚ùå Build & Deploy: FAILED"
            echo "   - Docker build or push failed"
            echo "   - Pipeline continued despite failure"
          else
            echo "‚ö†Ô∏è  Build & Deploy: UNKNOWN"
            echo "   - Status could not be determined"
          fi
          echo ""
          
          # DAST Status
          if [ "${{ job.status }}" == "success" ]; then
            echo "‚úÖ DAST (ZAP Proxy): PASSED"
            echo "   - Dynamic application security testing completed"
            echo "   - Results available as workflow artifacts"
          elif [ "${{ job.status }}" == "failure" ]; then
            echo "‚ùå DAST (ZAP Proxy): FAILED"
            echo "   - Dynamic application security testing failed"
            echo "   - Check workflow logs for details"
          else
            echo "‚ö†Ô∏è  DAST (ZAP Proxy): UNKNOWN"
            echo "   - Status could not be determined"
          fi
          echo ""
          
          echo "üìä OVERALL STATUS"
          echo "=================="
          if [ "${{ needs.sast.result }}" == "success" ] && [ "${{ needs.scm.result }}" == "success" ] && [ "${{ needs.build-and-deploy.result }}" == "success" ] && [ "${{ job.status }}" == "success" ]; then
            echo "üéâ ALL TESTS PASSED - Application is secure!"
          else
            echo "‚ö†Ô∏è  SOME TESTS FAILED - Review results above"
            echo ""
            echo "üîß NEXT STEPS:"
            echo "1. Check individual test results above"
            echo "2. Review SonarCloud dashboard for SAST issues"
            echo "3. Check GitHub Security tab for SCM results"
            echo "4. Review workflow artifacts for DAST results"
            echo "5. Fix issues and re-run pipeline"
          fi
          echo ""
          echo "üìö DOCUMENTATION:"
          echo "- SAST: https://docs.sonarcloud.io/"
          echo "- SCM: https://aquasecurity.github.io/trivy/"
          echo "- DAST: https://www.zaproxy.org/docs/" 